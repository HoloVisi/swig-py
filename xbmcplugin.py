# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xbmcplugin', [dirname(__file__)])
        except ImportError:
            import _xbmcplugin
            return _xbmcplugin
        if fp is not None:
            try:
                _mod = imp.load_module('_xbmcplugin', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _xbmcplugin = swig_import_helper()
    del swig_import_helper
else:
    import _xbmcplugin
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def setResolvedUrl(*args):
  return _xbmcplugin.setResolvedUrl(*args)
setResolvedUrl = _xbmcplugin.setResolvedUrl

def getSetting(*args):
  return _xbmcplugin.getSetting(*args)
getSetting = _xbmcplugin.getSetting

def setSetting(*args):
  return _xbmcplugin.setSetting(*args)
setSetting = _xbmcplugin.setSetting

def setContent(*args):
  return _xbmcplugin.setContent(*args)
setContent = _xbmcplugin.setContent

def setPluginCategory(*args):
  return _xbmcplugin.setPluginCategory(*args)
setPluginCategory = _xbmcplugin.setPluginCategory

def setProperty(*args):
  return _xbmcplugin.setProperty(*args)
setProperty = _xbmcplugin.setProperty
SORT_METHOD_NONE = _xbmcplugin.SORT_METHOD_NONE
SORT_METHOD_LABEL = _xbmcplugin.SORT_METHOD_LABEL
SORT_METHOD_LABEL_IGNORE_THE = _xbmcplugin.SORT_METHOD_LABEL_IGNORE_THE
SORT_METHOD_DATE = _xbmcplugin.SORT_METHOD_DATE
SORT_METHOD_SIZE = _xbmcplugin.SORT_METHOD_SIZE
SORT_METHOD_FILE = _xbmcplugin.SORT_METHOD_FILE
SORT_METHOD_DRIVE_TYPE = _xbmcplugin.SORT_METHOD_DRIVE_TYPE
SORT_METHOD_TRACKNUM = _xbmcplugin.SORT_METHOD_TRACKNUM
SORT_METHOD_DURATION = _xbmcplugin.SORT_METHOD_DURATION
SORT_METHOD_TITLE = _xbmcplugin.SORT_METHOD_TITLE
SORT_METHOD_TITLE_IGNORE_THE = _xbmcplugin.SORT_METHOD_TITLE_IGNORE_THE
SORT_METHOD_ARTIST = _xbmcplugin.SORT_METHOD_ARTIST
SORT_METHOD_ARTIST_IGNORE_THE = _xbmcplugin.SORT_METHOD_ARTIST_IGNORE_THE
SORT_METHOD_ALBUM = _xbmcplugin.SORT_METHOD_ALBUM
SORT_METHOD_ALBUM_IGNORE_THE = _xbmcplugin.SORT_METHOD_ALBUM_IGNORE_THE
SORT_METHOD_GENRE = _xbmcplugin.SORT_METHOD_GENRE
SORT_METHOD_VIDEO_YEAR = _xbmcplugin.SORT_METHOD_VIDEO_YEAR
SORT_METHOD_VIDEO_RATING = _xbmcplugin.SORT_METHOD_VIDEO_RATING
SORT_METHOD_PROGRAM_COUNT = _xbmcplugin.SORT_METHOD_PROGRAM_COUNT
SORT_METHOD_PLAYLIST_ORDER = _xbmcplugin.SORT_METHOD_PLAYLIST_ORDER
SORT_METHOD_EPISODE = _xbmcplugin.SORT_METHOD_EPISODE
SORT_METHOD_VIDEO_TITLE = _xbmcplugin.SORT_METHOD_VIDEO_TITLE
SORT_METHOD_VIDEO_SORT_TITLE = _xbmcplugin.SORT_METHOD_VIDEO_SORT_TITLE
SORT_METHOD_VIDEO_SORT_TITLE_IGNORE_THE = _xbmcplugin.SORT_METHOD_VIDEO_SORT_TITLE_IGNORE_THE
SORT_METHOD_PRODUCTIONCODE = _xbmcplugin.SORT_METHOD_PRODUCTIONCODE
SORT_METHOD_SONG_RATING = _xbmcplugin.SORT_METHOD_SONG_RATING
SORT_METHOD_MPAA_RATING = _xbmcplugin.SORT_METHOD_MPAA_RATING
SORT_METHOD_VIDEO_RUNTIME = _xbmcplugin.SORT_METHOD_VIDEO_RUNTIME
SORT_METHOD_STUDIO = _xbmcplugin.SORT_METHOD_STUDIO
SORT_METHOD_STUDIO_IGNORE_THE = _xbmcplugin.SORT_METHOD_STUDIO_IGNORE_THE
SORT_METHOD_UNSORTED = _xbmcplugin.SORT_METHOD_UNSORTED
SORT_METHOD_BITRATE = _xbmcplugin.SORT_METHOD_BITRATE
SORT_METHOD_LISTENERS = _xbmcplugin.SORT_METHOD_LISTENERS
# This file is compatible with both classic and new-style classes.


def addDirectoryItem(*args):
  return _xbmcplugin.addDirectoryItem(*args)
addDirectoryItem = _xbmcplugin.addDirectoryItem

def addDirectoryItems(*args):
  return _xbmcplugin.addDirectoryItems(*args)
addDirectoryItems = _xbmcplugin.addDirectoryItems

def endOfDirectory(*args):
  return _xbmcplugin.endOfDirectory(*args)
endOfDirectory = _xbmcplugin.endOfDirectory

def addSortMethod(*args):
  return _xbmcplugin.addSortMethod(*args)
addSortMethod = _xbmcplugin.addSortMethod

def setPluginFanart(*args):
  return _xbmcplugin.setPluginFanart(*args)
setPluginFanart = _xbmcplugin.setPluginFanart
